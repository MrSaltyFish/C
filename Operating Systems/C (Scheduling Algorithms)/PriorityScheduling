#include <stdio.h>

struct priority_scheduling {
    char process_name;     // process name
    int burst_time;        // execution time
    int waiting_time;      // waiting time
    int turn_around_time;  // total execution time
    int priority;          // process priority
};

int main() {
    int number_of_process;
    int total = 0;  // for total waiting and turnaround time
    struct priority_scheduling temp_process;  // for swapping
    int ASCII_number = 65;                    // for process name assignment
    int position;
    float average_waiting_time;
    float average_turnaround_time;
    int i, j;
    // INPUT
    printf("Enter the total number of processes: ");
    scanf("%d", &number_of_process);
    struct priority_scheduling process[number_of_process];

    printf("\nEnter burst time and priority of each process:\n");
    for(int i = 0; i < number_of_process; i++) {
        process[i].process_name = (char)ASCII_number;

        printf("\nDetails of process %c:\n", process[i].process_name);
        printf("Burst time: ");
        scanf("%d", &process[i].burst_time);
        printf("Priority: ");
        scanf("%d", &process[i].priority);

        ASCII_number++;
    }

    // Sort Based on Priority
    for(i = 0; i < number_of_process; i++) {
        position = i;
        for(j = i + 1; j < number_of_process; j++) {
            if(process[j].priority > process[i].priority) {
                position = j;
            }
            temp_process = process[i];
            process[i] = process[j];
            process[j] = temp_process;
        }
    }

    // SAME AS FCFS
    // WAITING TIME FOR EACH PROCESS IS CALCULATED
    for(i = 1; i < number_of_process; i++) {
        process[i].waiting_time = 0;
        for(j = 0; j < i; j++) {
            process[i].waiting_time += process[i].burst_time;
        }
    }
    // TURNAROUNDTIME FOR EACH
    for(i = 0; i < number_of_process; i++) {
        process[i].turn_around_time =
            process[i].waiting_time + process[i].burst_time;
        average_waiting_time += process[i].waiting_time;
        average_turnaround_time += process[i].turn_around_time;
    }

    // AVERAGES FOR EACH
    average_waiting_time = average_waiting_time / number_of_process;
    average_turnaround_time = average_turnaround_time / number_of_process;

    // OUTPUT
    printf("\n\nProcess Name \tBurst Time \tWaiting Time \tTurnaround Time\n");
    printf("------------------------------------------------------------\n");

    for(int i = 0; i < number_of_process; i++) {
        process[i].turn_around_time =
            process[i].burst_time + process[i].waiting_time;
        total += process[i].turn_around_time;

        printf("\t%c\t\t%d\t\t%d\t\t%d\n", process[i].process_name,
               process[i].burst_time, process[i].waiting_time,
               process[i].turn_around_time);
        printf(
            "------------------------------------------------------------\n");
    }

    average_turnaround_time = (float)total / number_of_process;
    printf("\n\nAverage Waiting Time: %f", average_waiting_time);
    printf("\nAverage Turnaround Time: %f\n", average_turnaround_time);

    return 0;
}
